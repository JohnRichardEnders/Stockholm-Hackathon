"""
Fact-Checking Service - Merged ACI Evidence Gathering + OpenAI Analysis
Combines get_sources_service and claim_checker_service into one async service
"""

import json
import logging
import os
from typing import List
from openai import OpenAI
from dotenv import load_dotenv
from aci import ACI
from models import Claim, ClaimResponse, Evidence, ClaimWithAllEvidence

# Load environment variables
load_dotenv()

logger = logging.getLogger(__name__)

# Initialize clients
aci_client = ACI()
openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))


async def fact_check_claim(claim: Claim) -> ClaimResponse:
    """
    Complete fact-checking pipeline: gather evidence + analyze claim
    
    Args:
        claim: Claim object with start time and claim text
        
    Returns:
        ClaimResponse: Complete fact-check result with status, summary, and evidence
    """
    
    try:
        logger.info(f"Starting fact-check for claim: '{claim.claim}'")
        
        # Step 1: Gather evidence using ACI
        claim_with_evidence = await gather_evidence_with_aci(claim)
        
        # Step 2: Analyze claim with evidence using OpenAI
        fact_check_result = await analyze_claim_with_openai(claim_with_evidence)
        
        logger.info(f"Fact-check completed: {claim.claim} -> {fact_check_result.status}")
        return fact_check_result
        
    except Exception as e:
        logger.error(f"Fact-checking failed for claim '{claim.claim}': {e}")
        
        # Return inconclusive result on error
        return ClaimResponse(
            claim=claim,
            status="inconclusive",
            written_summary="Could not fact-check this claim due to technical error.",
            evidence=[]
        )


async def gather_evidence_with_aci(claim: Claim) -> ClaimWithAllEvidence:
    """
    Step 1: Gather evidence for the claim using ACI EXA_AI search
    
    Args:
        claim: Claim to gather evidence for
        
    Returns:
        ClaimWithAllEvidence: Claim with gathered evidence and summary
    """
    
    try:
        logger.info(f"Gathering evidence for: '{claim.claim}'")
        
        # Get EXA_AI search function from ACI
        exa_ai_answer_function = aci_client.functions.get_definition("EXA_AI__ANSWER")
        
        # Use OpenAI to generate search query and call EXA_AI
        response = openai_client.chat.completions.create(
            model="gpt-4o-2024-08-06",
            messages=[
                {
                    "role": "system",
                    "content": "You are a research assistant. Use the EXA_AI search tool to find evidence about the given claim. Set maximum number of sources to 3."
                },
                {
                    "role": "user",
                    "content": f"Find evidence and information about this claim: {claim.claim}"
                }
            ],
            tools=[exa_ai_answer_function],
            tool_choice="required"
        )
        
        # Handle the tool call
        tool_call = response.choices[0].message.tool_calls[0] if response.choices[0].message.tool_calls else None
        
        if tool_call:
            # Debug the tool call arguments
            logger.info(f"Tool call arguments: {tool_call.function.arguments}")
            
            try:
                # Execute the ACI function call
                parsed_args = json.loads(tool_call.function.arguments)
                logger.info(f"Parsed arguments: {parsed_args}")
                
                result = aci_client.handle_function_call(
                    tool_call.function.name,
                    parsed_args,
                    linked_account_owner_id="morris_hackathon"
                )
            except json.JSONDecodeError as e:
                logger.error(f"Failed to parse tool call arguments: {e}")
                logger.error(f"Raw arguments: {tool_call.function.arguments}")
                raise
            
            # Parse evidence from ACI result
            evidence_list = []
            citations = result.get("data", {}).get("citations", [])
            
            for citation in citations:
                evidence = Evidence(
                    source_url=citation.get("url", ""),
                    source_title=citation.get("title", ""),
                    snippet=citation.get("snippet", "")
                )
                evidence_list.append(evidence)
            
            answer = result.get("data", {}).get("answer", "")
            
            logger.info(f"Gathered {len(evidence_list)} evidence sources")
            
            return ClaimWithAllEvidence(
                start=claim.start,
                claim=claim,
                summary=answer,
                evidence=evidence_list
            )
        else:
            logger.warning("No tool call generated by OpenAI")
            return ClaimWithAllEvidence(
                start=claim.start,
                claim=claim,
                summary="No evidence found",
                evidence=[]
            )
            
    except Exception as e:
        logger.error(f"Evidence gathering failed: {e}")
        return ClaimWithAllEvidence(
            start=claim.start,
            claim=claim,
            summary="Error occurred during evidence gathering",
            evidence=[]
        )


async def analyze_claim_with_openai(claim_with_evidence: ClaimWithAllEvidence) -> ClaimResponse:
    """
    Step 2: Analyze the claim using gathered evidence with OpenAI structured output
    
    Args:
        claim_with_evidence: Claim with gathered evidence
        
    Returns:
        ClaimResponse: Final fact-check result
    """
    
    try:
        logger.info(f"Analyzing claim with evidence: '{claim_with_evidence.claim.claim}'")
        
        # Use OpenAI's structured output parsing
        response = openai_client.chat.completions.parse(
            model="gpt-4o-2024-08-06",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "You are a fact-checking assistant. "
                        "Given a claim with evidence, analyze the claim and return a structured response. "
                        "Classify the claim as one of: verified, false, disputed, or inconclusive. "
                        "Provide a clear summary explaining your reasoning based on the available evidence."
                    )
                },
                {
                    "role": "user",
                    "content": f"Claim: {claim_with_evidence.claim.claim}\n"
                              f"Evidence Summary: {claim_with_evidence.summary}\n"
                              f"Sources: {[f'{e.source_title}: {e.snippet}' for e in claim_with_evidence.evidence]}"
                }
            ],
            response_format=ClaimResponse
        )
        
        # Extract the parsed response
        claim_response = response.choices[0].message.parsed

        # Preserve original claim (including accurate start timestamp)
        try:
            # Overwrite any model-generated claim to avoid losing timestamps
            claim_response.claim = claim_with_evidence.claim
        except Exception:
            # If the parsed object is immutable or missing, fall back to constructing a new one
            return ClaimResponse(
                claim=claim_with_evidence.claim,
                status=getattr(claim_response, "status", "inconclusive"),
                written_summary=getattr(claim_response, "written_summary", ""),
                evidence=getattr(claim_response, "evidence", []) or claim_with_evidence.evidence,
            )
        
        logger.info(f"Analysis completed: {claim_response.status}")
        return claim_response
        
    except Exception as e:
        logger.error(f"Claim analysis failed: {e}")
        
        # Return inconclusive result on error
        return ClaimResponse(
            claim=claim_with_evidence.claim,
            status="inconclusive",
            written_summary="Could not analyze this claim due to technical error.",
            evidence=claim_with_evidence.evidence
        )
